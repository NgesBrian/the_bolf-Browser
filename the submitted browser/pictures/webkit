

    Algorithm
    DS
    Graph
    Artificial intelligence
    C
    C++
    Dynamic programing
    Embedded system
    GDB
    GTK
    Linux bash shell
    Linux Device Driver
    PHP
    Magento
    QT
    OpenCV
    Python
    Webkit
    WebGL
    GDB skill
    How To
    Projects
    MCQ Test Portal
    Research
    Design pattern with C++
    Careers Guide
    Linux system programing
    interview Question

WikiStack
WikiStack

A portal for software Career and Guideline

Register  |  Login

    Home
    Questions
    Ask Q
    Challenge
    Interview
    Privacy & terms
    Contact
    Submit Article

Creating a Web Browser in GTK with Webkit
Web Browser in GTK with WebKit

The Web Browser is one of the complicated software after operating system. Now a days the rapid development of web standard or web application is making this software more complex. sooner or later i believe that this will override the complexity of operating system.  We are well aware of the web browsers and use in our every day life. some of of the famous web browsers are Chrome,Internet Explorer,Firefox,Opera,safari etc.
 Here we will learn “how to create your own browser with some limited functions in GTK with webkit in C language on ubuntu linux”.

Requirement:

    Web content engine library for GTK+ – Development files [libwebkitgtk-3.0-dev]

WebKit is a web content engine. It is able to display content such as HTML, SVG, XML, and others. It also supports DOM, XMLHttpRequest, XSLT, CSS, Javascript/ECMAscript and more. This package provides development files required to create GTK+ applications embedding WebKit.

    development files for the GTK+ library.

GTK+ is a multi-platform toolkit for creating graphical user interfaces. Offering a complete set of widgets, GTK+ is suitable for projects ranging from small one-off tools to complete application suites.
Installing required library

(1) Open terminal and run below command:

alen@Alen-Vostro-1550:~$ sudo apt-get install libwebkitgtk-dev 

alen@Alen-Vostro-1550:~$ sudo apt-get install libgtk2.0-dev

Start Coding your Browser Now:

(1) main.c
#include<gtk/gtk.h>
#include<webkit/webkit.h>
 
int main(int argc, char** argv)
{
 
  GtkWidget *window;
  GtkWidget *web;
  GtkWidget *vbox;
  GtkWidget *hbox;
  GtkWidget *hbox_web_view;
  GtkWidget *go_button;
  GtkWidget *back_button;
  GtkWidget *forward_button;
  GtkWidget *stop_button;
  GtkWidget *entry;
  
 
  gtk_init(&argc,&argv);
 
  window = gtk_window_new(GTK_WINDOW_TOPLEVEL);
  gtk_window_set_position(GTK_WINDOW(window), GTK_WIN_POS_CENTER);
  gtk_window_set_default_size(GTK_WINDOW(window), 850, 600);
  gtk_window_set_title(GTK_WINDOW(window), "myWebBrowser");
 
  vbox = gtk_vbox_new(false,false);
  hbox = gtk_hbox_new(false,false);
  hbox_web_view = gtk_hbox_new(false,false);
 
  gtk_container_add(GTK_CONTAINER(window), vbox);
  gtk_container_add(GTK_CONTAINER(vbox), hbox);
  gtk_container_add(GTK_CONTAINER(vbox), hbox_web_view);
  
  back_button = gtk_button_new_with_label("Back");
  forward_button = gtk_button_new_with_label("Forward");
  go_button = gtk_button_new_with_label("Go");
  stop_button = gtk_button_new_with_label("stop");
  entry = gtk_entry_new();
  gtk_entry_set_text (GTK_ENTRY(entry),"http://");
  
  gtk_box_pack_start(GTK_BOX(hbox),back_button,0,0,1);
  gtk_box_pack_start(GTK_BOX(hbox),forward_button,0,0,1);
  gtk_box_pack_start(GTK_BOX(hbox),stop_button,0,0,1);
  gtk_box_pack_start(GTK_BOX(hbox),entry,1,1,1);
  gtk_box_pack_start(GTK_BOX(hbox),go_button,0,0,0);
 
  /* create Webview */
  web = webkit_web_view_new();
  gtk_box_pack_start(GTK_BOX(hbox_web_view),web,0,0,0);
  
    
 
  g_signal_connect_swapped(G_OBJECT(window), "destroy",
        G_CALLBACK(gtk_main_quit), NULL);
  
  gtk_widget_show_all(window);
 
  gtk_main();
return 0;
 
}
(2) Build the above code.
gcc main.c -o myBrowser `pkg-config –cflags –libs gtk+-2.0 webkit-1.0`
(3) Run myBrowser
alen@Alen-Vostro-1550:~/$ ./myBrowser
Below simple UI  would be output:
browse
(4) Load URL in webkit web view.

void webkit_web_view_load_uri (WebKitWebView *web_view,
                          const gchar *uri);

This API requests loading of the specified URI string.

Implementation in our sample UI with some basic web browser functions.

As we have made an URL entry in our sample UI. Then  after entering an website address we have to get text from gtk entry widget and pass to webkit_web_view_load_uri (WebKitWebView *web_view, const gchar *uri) function.this will open web address in web view widget.

 Here is complete code:
#include<gtk/gtk.h>
#include<webkit/webkit.h>
 
GtkWidget *window;
GtkWidget *web;
GtkWidget *vbox;
GtkWidget *hbox;
GtkWidget *hbox_web_view;
GtkWidget *go_button;
GtkWidget *back_button;
GtkWidget *forward_button;
GtkWidget *stop_button;
GtkWidget *entry;
 
const char* uri;
void go(GtkWidget* widget, gpointer* wid)
{
GtkWidget* entry = GTK_WIDGET(wid);
uri = gtk_entry_get_text(GTK_ENTRY(entry));
gtk_entry_progress_pulse(GTK_ENTRY(entry));
webkit_web_view_load_uri(WEBKIT_WEB_VIEW(web),uri);
 
}
void back(GtkWidget* widget, gpointer* wid)
{
GtkWidget* web = GTK_WIDGET(wid);
webkit_web_view_go_back(WEBKIT_WEB_VIEW(web));
 
}
void forward(GtkWidget* widget, gpointer* wid)
{
GtkWidget* web = GTK_WIDGET(wid);
webkit_web_view_go_forward(WEBKIT_WEB_VIEW(web));
 
}
void stop(GtkWidget* widget, gpointer* wid)
{
GtkWidget* web = GTK_WIDGET(wid);
webkit_web_view_stop_loading(WEBKIT_WEB_VIEW(web));
 
}
void activate(GtkWidget* widget, gpointer* wid)
{
GtkWidget* web = GTK_WIDGET(wid);
uri = gtk_entry_get_text(GTK_ENTRY(widget));
gtk_entry_progress_pulse(GTK_ENTRY(widget));
webkit_web_view_load_uri(WEBKIT_WEB_VIEW(web),uri);
 
}
void progress (WebKitWebView *web, gint progress,gpointer* data)
{
GtkWidget* wid = GTK_WIDGET(data);
gtk_entry_set_progress_fraction (GTK_ENTRY(wid),progress);
}
 
void finished (WebKitWebView  *web_view, WebKitWebFrame *frame,
gpointer*  data)
{
GtkWidget* wid = GTK_WIDGET(data);
gtk_entry_set_progress_fraction (GTK_ENTRY(wid),0.0);
}
 
int main(int argc, char** argv)
{
 
gtk_init(&argc,&argv);
 
window = gtk_window_new(GTK_WINDOW_TOPLEVEL);
gtk_window_set_position(GTK_WINDOW(window), GTK_WIN_POS_CENTER);
gtk_window_set_default_size(GTK_WINDOW(window), 850, 600);
gtk_window_set_title(GTK_WINDOW(window), "myWebBrowser");
 
vbox = gtk_vbox_new(false,false);
hbox = gtk_hbox_new(false,false);
hbox_web_view = gtk_hbox_new(false,false);
 
gtk_container_add(GTK_CONTAINER(window), vbox);
gtk_container_add(GTK_CONTAINER(vbox), hbox);
gtk_container_add(GTK_CONTAINER(vbox), hbox_web_view);
 
back_button = gtk_button_new_with_label("Back");
forward_button = gtk_button_new_with_label("Forward");
go_button = gtk_button_new_with_label("Go");
stop_button = gtk_button_new_with_label("stop");
entry = gtk_entry_new();
gtk_entry_set_text (GTK_ENTRY(entry),"http://");
 
gtk_box_pack_start(GTK_BOX(hbox),back_button,0,0,1);
gtk_box_pack_start(GTK_BOX(hbox),forward_button,0,0,1);
gtk_box_pack_start(GTK_BOX(hbox),stop_button,0,0,1);
gtk_box_pack_start(GTK_BOX(hbox),entry,1,1,1);
gtk_box_pack_start(GTK_BOX(hbox),go_button,0,0,0);
 
/* create Webview */
web = webkit_web_view_new();
gtk_box_pack_start(GTK_BOX(hbox_web_view),web,0,0,0);
 
g_signal_connect(go_button, "clicked",  G_CALLBACK(go), entry);
g_signal_connect(back_button, "clicked",  G_CALLBACK(back), web);
g_signal_connect(forward_button, "clicked",  G_CALLBACK(forward), web);
g_signal_connect(stop_button, "clicked",  G_CALLBACK(stop), web);
g_signal_connect(entry, "activate",  G_CALLBACK(activate), web);
g_signal_connect(WEBKIT_WEB_VIEW(web),"load-progress-changed",G_CALLBACK(progress),entry);
g_signal_connect(WEBKIT_WEB_VIEW(web),"load-finished",G_CALLBACK(finished),entry);
g_signal_connect_swapped(G_OBJECT(window), "destroy",
G_CALLBACK(gtk_main_quit), NULL);
 
gtk_widget_show_all(window);
 
gtk_main();
return 0;
 
}
(5) Now Build above code [main.c]

Run Below command to compile main.c

#gcc main.c -o myBrowser `pkg-config –cflags –libs gtk+-2.0 webkit-1.0`
Run myBrowser

#./myBrowser

br
WE RECOMMEND RELATED POST

    how webkit loads a web page
    how webkit loads a web page
    webkit2 process model
    webkit2 process model
    How Webkit render web page [Video]
    How Webkit render web page [Video]
    webkit cookie handling with http protocol?
    webkit cookie handling with http protocol?
    The WebKit Browser Engine An Overview
    The WebKit Browser Engine An Overview
    Some important links for webkit Developers:Docs
    Some important links for webkit Developers:Docs
    Downloading and Bulding Webkit from svn on Linux
    Downloading and Bulding Webkit from svn on Linux
    First program for GTK+ beginner
    First program for GTK+ beginner

« function overloading c++
Difference between new and malloc? »
Recent Posts

    Second best minimum spanning tree
    Odd Sum Problem from UVa Online Judge
    5 Easy Steps to Start an Online Store with Magento
    Top 5 Internet of Things Operating system
    Internet of things Definition and explanation

Tags

    algorithm backtracking binary tree binary tree interview question c++ change coding challenge computer name cpp custom magento ecommerce store development dynamic memory dynamic programing gdb graph theory gtk Hire Magento Developers Hire Magento Programmers internet of things interview Linux magento development services Magento eCommerce Developers magento web development matrix challanges oop Ph.d resume terminal ubuntu username

Copyright © 2015. WikiStack
SiteMap

